{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/mocktail/dist/mocktail.js","src/Bar.js","src/Foo.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","Foo","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"isProduction","currentEnvironment","PRODUCTION","resolve","actualModule","nameRepresentation","undefined","arguments","mock","name","runtimeDependency","modules","get","stub","_len","Array","_key","stubbedModule","env","TESTING","indexOf","inject","actualName","stubModule","set","reset","Object","defineProperty","value","ENV","Map","_mocktail","strings","pickOneOutOfThree","Math","floor","random","Bar","BarMock","_Bar3","_Bar","welcomeString","FooMock","_Bar2"],"mappings":"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","file":"Foo.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * @module Mocktail\n * @author Adam Timberlake\n * @see https://github.com/Wildhoney/Mocktail\n */\n\n/**\n * @property PRODUCTION\n * @type {String}\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.resolve = resolve;\nexports.mock = mock;\nexports.stub = stub;\nexports.env = env;\nexports.inject = inject;\nexports.reset = reset;\nvar PRODUCTION = 'production';\n\n/**\n * @constant TESTING\n * @type {String}\n */\nvar TESTING = 'testing';\n\n/**\n * @constant ENV\n * @type {{PRODUCTION: String, TESTING: String}}\n */\nvar ENV = { PRODUCTION: PRODUCTION, TESTING: TESTING };\n\nexports.ENV = ENV;\n/**\n * @property modules\n * @type {Map}\n */\nvar modules = new Map();\n\n/**\n * @property currentEnvironment\n * @type {String}\n */\nvar currentEnvironment = PRODUCTION;\n\n/**\n * @method isProduction\n * @return {Boolean}\n */\nfunction isProduction() {\n  return currentEnvironment === PRODUCTION;\n}\n\n/**\n * @method resolve\n * @param {Function} actualModule\n * @param {String} nameRepresentation\n * @return {*}\n */\n\nfunction resolve(actualModule) {\n  var nameRepresentation = arguments[1] === undefined ? '' : arguments[1];\n\n  return mock(actualModule, nameRepresentation);\n}\n\n/**\n * @method mock\n * @param {Function} actualModule\n * @param {String} [nameRepresentation='']\n * @return {*}\n */\n\nfunction mock(actualModule) {\n  var nameRepresentation = arguments[1] === undefined ? '' : arguments[1];\n\n  if ((!actualModule.name || actualModule.name === '_class') && !nameRepresentation) {\n\n    // Prevent the user from passing an anonymous function/class.\n    throw new Error('Mocktail: Passing anonymous function to mocktail.mock; use second argument to specify a name.');\n  }\n\n  var runtimeDependency = modules.get(nameRepresentation || actualModule.name);\n\n  if (!isProduction() && typeof runtimeDependency !== 'undefined') {\n    return runtimeDependency;\n  }\n\n  return actualModule;\n}\n\n/**\n * @method stub\n * @param {Array} modules\n * @return {*}\n */\n\nfunction stub() {\n  for (var _len = arguments.length, modules = Array(_len), _key = 0; _key < _len; _key++) {\n    modules[_key] = arguments[_key];\n  }\n\n  if (modules.length === 0 || typeof modules[0] === 'undefined') {\n\n    // Prevent the developer from shooting themselves in the foot.\n    throw new Error('Mocktail: You must supply at least one component to the mocktail.stub method.');\n  }\n\n  var stubbedModule = typeof modules[1] !== 'undefined' ? modules[1] : modules[0];\n  return isProduction() ? modules[0] : stubbedModule;\n}\n\n/**\n * @method env\n * @param {String} [name=null]\n * @return {String|void}\n */\n\nfunction env() {\n  var name = arguments[0] === undefined ? null : arguments[0];\n\n  if (name === null) {\n    return currentEnvironment;\n  }\n\n  if (! ~[PRODUCTION, TESTING].indexOf(name)) {\n\n    // Ensure the developer is passing the correct values to avoid disappointment.\n    throw new Error('Mocktail: Environment must be either mocktail.ENV.PRODUCTION or mocktail.ENV.TESTING.');\n  }\n\n  currentEnvironment = name;\n}\n\n/**\n * @method inject\n * @param {String} actualName\n * @param {*} stubModule\n * @return {void}\n */\n\nfunction inject(actualName, stubModule) {\n\n  if (typeof actualName !== 'string') {\n    throw new Error('Mocktail: You must supply the function name of the object to stub.');\n  }\n\n  modules.set(actualName, stubModule);\n}\n\n/**\n * @method reset\n * @return {void}\n */\n\nfunction reset() {\n  currentEnvironment = PRODUCTION;\n}\n\n// Export an object of all the functions as the default.\nexports['default'] = { resolve: resolve, stub: stub, env: env, inject: inject, mock: mock, reset: reset, ENV: ENV };","import { stub } from 'mocktail';\n\n/**\n * Class Bar. Does things\n * @param {String} name\n */\n\nconst strings = ['Welcome', 'Willkommen', 'Bienvenue'];\n\nconst pickOneOutOfThree = () => Math.floor(Math.random(0, 2) * 3);\n\nclass Bar {\n    constructor(name) {\n        this.name = name;\n    }\n\n    /**\n     * Welcome String getter\n     */\n    get welcomeString() {\n        return strings[pickOneOutOfThree()];\n    }\n}\n\nclass BarMock {\n    constructor(name) {\n        this.name = name;\n    }\n\n    get welcomeString() {\n        return 'Welcome';\n    }\n}\n\nexport default stub(Bar, BarMock);\n","import Bar from './Bar';\nimport { stub } from 'mocktail';\n\n/**\n * Class Foo. Does things\n * @param {String} name\n */\n\nclass Foo extends Bar {\n    /**\n     * Draws the inside part of the opening (the door itself, transparent window, etc)\n     * @private\n     * @returns {THREE.Mesh}\n     */\n    greet() {\n        return `hi, ${this.name}! ${this.welcomeString}`;\n    }\n}\n\nclass FooMock extends Bar {\n    greet() {\n        return `hi, ${this.name}! Welcome`;\n    }\n}\n\nexport default stub(Foo, FooMock);\n"]}